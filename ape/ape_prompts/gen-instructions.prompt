---
model: gpt-4o
inputs: 
    response_format_instructions: A description of the response format instructions
    task_description: A description of the task that the LLM will be asked to perform
    dataset_desc: A description of the dataset we are using
    task_fewshot: A list of few shot examples of the task
    previous_prompts: A list of previous prompts we've attempted, along with their scores
    basic_prompt: A basic prompt that we've used before
    tip: A suggestion for how to go with writing the new prompt
---
<system>
    You are an expert prompt engineer.

You write prompts in `.prompt` file format (similar to mdx):
<![CDATA[
```prompt
---
model: gpt-4o
description: some description about the prompt
outputs:
    output_var_1: description of the output variable 1
    output_var_2: description of the output variable 2
---
<system>
system prompt here.
You can insert input variables anywhere, wrapped in brackets {{var_1}}
</system>
<user>
user prompt here
</user>
```
]]>
`outputs` of the yaml header section of the prompt will define the names (key) and descriptions (value) of the output variables. This definition will be used to parse the formatted outputs.

Each message is wrapped in tags. Available tag names are system and user. There are no limits to the number of messages included in the prompt. As an expert prompt engineer, you might include few shot examples, chain of thought, etc. whichever way you like.

A good way to structure the prompt is to add format/persona/instructions to the system prompt, and user inputs to the user prompt.

If you would like to use few shot examples, use the reserved variable {{_FEWSHOT_}} - just insert it into the prompt and a list of task demonstrations will be filled in afterwards. Your goal is to generate the proper and complete instructions that can be used without revision.

> Use brackets {{}} ONLY for input variables and the reserved few shot variable. Use [] instead for placeholders.

{response_format_instructions}
</system>
<user>
Use the information below to learn about a task that we are trying to solve using calls to an LM, then write a new prompt that will be used to prompt a Language Model to better solve the task.

Task for LLM:
{task_description}

Expected input variables:
{inputs_desc}

Expected output variables:
{outputs_desc}

Dataset summary (description of the dataset we are using):
{dataset_desc}

Task demos (example inputs/outputs of the task):
{task_fewshot}

Previous prompts (previous prompts we've attemped, along with their scores):
{previous_prompts} 

Basic prompt:
{basic_prompt}

Idea:
{tip}
--

Think step by step. Wrap the prompt section in ```prompt
``` tags. You should NEVER include bracket variables other than the input variables for the task.
</user>